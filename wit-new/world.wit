package jelle:test;

interface sqlite {
  enum error-code {
    bad,
  }

  variant value {
    null-value,
    string-value(string),
    blob-value(list<u8>),
    s64-value(s64),
    f64-value(f64),
  }

  resource transaction {
    query: async func(query: string, args: list<value>) -> result<list<row>, error-code>;
    execute: async func(query: string, args: list<value>) -> result<u64, error-code>;
    commit: async func() -> result<_, error-code>;
    rollback: async func() -> result<_, error-code>;
  }

  type row = list<value>;

  begin: async func() -> result<transaction, error-code>;
  query: async func(query: string, args: list<value>) -> result<list<row>, error-code>;
  execute: async func(query: string, args: list<value>) -> result<u64, error-code>;
}

world app {
  include wasi:http/proxy@0.3.0-rc-2025-09-16;

  import sqlite;

  export wasi:http/handler@0.3.0-rc-2025-09-16;
  export initialize: async func() -> result;
}

